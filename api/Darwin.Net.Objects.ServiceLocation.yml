### YamlMime:ManagedReference
items:
- uid: Darwin.Net.Objects.ServiceLocation
  commentId: T:Darwin.Net.Objects.ServiceLocation
  id: ServiceLocation
  parent: Darwin.Net.Objects
  children:
  - Darwin.Net.Objects.ServiceLocation.AssocIsCancelled
  - Darwin.Net.Objects.ServiceLocation.FutureChangeTo
  - Darwin.Net.Objects.ServiceLocation.LocationName
  - Darwin.Net.Objects.ServiceLocation.Station
  - Darwin.Net.Objects.ServiceLocation.Via
  langs:
  - csharp
  - vb
  name: ServiceLocation
  nameWithType: ServiceLocation
  fullName: Darwin.Net.Objects.ServiceLocation
  type: Class
  source:
    remote:
      path: Darwin.Net/Objects/ServiceLocation.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: ServiceLocation
    path: ../Darwin.Net/Objects/ServiceLocation.cs
    startLine: 14
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nProvides a service location for a train.\n"
  example: []
  syntax:
    content: public class ServiceLocation
    content.vb: Public Class ServiceLocation
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Darwin.Net.Objects.ServiceLocation.LocationName
  commentId: P:Darwin.Net.Objects.ServiceLocation.LocationName
  id: LocationName
  parent: Darwin.Net.Objects.ServiceLocation
  langs:
  - csharp
  - vb
  name: LocationName
  nameWithType: ServiceLocation.LocationName
  fullName: Darwin.Net.Objects.ServiceLocation.LocationName
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/ServiceLocation.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: LocationName
    path: ../Darwin.Net/Objects/ServiceLocation.cs
    startLine: 19
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nThe name of the location that the station board is for.\n"
  example: []
  syntax:
    content: public string LocationName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property LocationName As String
  overload: Darwin.Net.Objects.ServiceLocation.LocationName*
- uid: Darwin.Net.Objects.ServiceLocation.Station
  commentId: P:Darwin.Net.Objects.ServiceLocation.Station
  id: Station
  parent: Darwin.Net.Objects.ServiceLocation
  langs:
  - csharp
  - vb
  name: Station
  nameWithType: ServiceLocation.Station
  fullName: Darwin.Net.Objects.ServiceLocation.Station
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/ServiceLocation.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: Station
    path: ../Darwin.Net/Objects/ServiceLocation.cs
    startLine: 24
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nThe station in the service location.\n"
  example: []
  syntax:
    content: public Station Station { get; }
    parameters: []
    return:
      type: Darwin.Net.Objects.Station
    content.vb: Public Property Station As Station
  overload: Darwin.Net.Objects.ServiceLocation.Station*
- uid: Darwin.Net.Objects.ServiceLocation.Via
  commentId: P:Darwin.Net.Objects.ServiceLocation.Via
  id: Via
  parent: Darwin.Net.Objects.ServiceLocation
  langs:
  - csharp
  - vb
  name: Via
  nameWithType: ServiceLocation.Via
  fullName: Darwin.Net.Objects.ServiceLocation.Via
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/ServiceLocation.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: Via
    path: ../Darwin.Net/Objects/ServiceLocation.cs
    startLine: 29
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nAn optional via string that should be displayed after the location, to indicate further information about an ambiguous route. Note that vias are only present for <xref href=\"Darwin.Net.Objects.ServiceLocation\" data-throw-if-not-resolved=\"false\"></xref> objects that appear in destination lists.\n"
  example: []
  syntax:
    content: public string? Via { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Via As String
  overload: Darwin.Net.Objects.ServiceLocation.Via*
- uid: Darwin.Net.Objects.ServiceLocation.FutureChangeTo
  commentId: P:Darwin.Net.Objects.ServiceLocation.FutureChangeTo
  id: FutureChangeTo
  parent: Darwin.Net.Objects.ServiceLocation
  langs:
  - csharp
  - vb
  name: FutureChangeTo
  nameWithType: ServiceLocation.FutureChangeTo
  fullName: Darwin.Net.Objects.ServiceLocation.FutureChangeTo
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/ServiceLocation.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: FutureChangeTo
    path: ../Darwin.Net/Objects/ServiceLocation.cs
    startLine: 34
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nA <xref href=\"Darwin.Net.Objects.ServiceType\" data-throw-if-not-resolved=\"false\"></xref> specifying service type (Bus/Ferry/Train) to which will be changed in the future.\n"
  example: []
  syntax:
    content: public ServiceType? FutureChangeTo { get; }
    parameters: []
    return:
      type: System.Nullable{Darwin.Net.Objects.ServiceType}
    content.vb: Public Property FutureChangeTo As ServiceType?
  overload: Darwin.Net.Objects.ServiceLocation.FutureChangeTo*
- uid: Darwin.Net.Objects.ServiceLocation.AssocIsCancelled
  commentId: P:Darwin.Net.Objects.ServiceLocation.AssocIsCancelled
  id: AssocIsCancelled
  parent: Darwin.Net.Objects.ServiceLocation
  langs:
  - csharp
  - vb
  name: AssocIsCancelled
  nameWithType: ServiceLocation.AssocIsCancelled
  fullName: Darwin.Net.Objects.ServiceLocation.AssocIsCancelled
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/ServiceLocation.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: AssocIsCancelled
    path: ../Darwin.Net/Objects/ServiceLocation.cs
    startLine: 39
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nDefines if the origin or destination can no longer be reached because the association has been cancelled.\n"
  example: []
  syntax:
    content: public bool? AssocIsCancelled { get; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Public Property AssocIsCancelled As Boolean?
  overload: Darwin.Net.Objects.ServiceLocation.AssocIsCancelled*
references:
- uid: Darwin.Net.Objects
  commentId: N:Darwin.Net.Objects
  name: Darwin.Net.Objects
  nameWithType: Darwin.Net.Objects
  fullName: Darwin.Net.Objects
  spec.csharp:
  - uid: Darwin
    name: Darwin
  - name: .
  - uid: Darwin.Net
    name: Net
  - name: .
  - uid: Darwin.Net.Objects
    name: Objects
  spec.vb:
  - uid: Darwin
    name: Darwin
  - name: .
  - uid: Darwin.Net
    name: Net
  - name: .
  - uid: Darwin.Net.Objects
    name: Objects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Darwin.Net.Objects.ServiceLocation.LocationName*
  commentId: Overload:Darwin.Net.Objects.ServiceLocation.LocationName
  name: LocationName
  nameWithType: ServiceLocation.LocationName
  fullName: Darwin.Net.Objects.ServiceLocation.LocationName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Darwin.Net.Objects.ServiceLocation.Station*
  commentId: Overload:Darwin.Net.Objects.ServiceLocation.Station
  name: Station
  nameWithType: ServiceLocation.Station
  fullName: Darwin.Net.Objects.ServiceLocation.Station
- uid: Darwin.Net.Objects.Station
  commentId: T:Darwin.Net.Objects.Station
  parent: Darwin.Net.Objects
  name: Station
  nameWithType: Station
  fullName: Darwin.Net.Objects.Station
- uid: Darwin.Net.Objects.ServiceLocation
  commentId: T:Darwin.Net.Objects.ServiceLocation
  name: ServiceLocation
  nameWithType: ServiceLocation
  fullName: Darwin.Net.Objects.ServiceLocation
- uid: Darwin.Net.Objects.ServiceLocation.Via*
  commentId: Overload:Darwin.Net.Objects.ServiceLocation.Via
  name: Via
  nameWithType: ServiceLocation.Via
  fullName: Darwin.Net.Objects.ServiceLocation.Via
- uid: Darwin.Net.Objects.ServiceType
  commentId: T:Darwin.Net.Objects.ServiceType
  parent: Darwin.Net.Objects
  name: ServiceType
  nameWithType: ServiceType
  fullName: Darwin.Net.Objects.ServiceType
- uid: Darwin.Net.Objects.ServiceLocation.FutureChangeTo*
  commentId: Overload:Darwin.Net.Objects.ServiceLocation.FutureChangeTo
  name: FutureChangeTo
  nameWithType: ServiceLocation.FutureChangeTo
  fullName: Darwin.Net.Objects.ServiceLocation.FutureChangeTo
- uid: System.Nullable{Darwin.Net.Objects.ServiceType}
  commentId: T:System.Nullable{Darwin.Net.Objects.ServiceType}
  parent: System
  definition: System.Nullable`1
  name: ServiceType?
  nameWithType: ServiceType?
  fullName: Darwin.Net.Objects.ServiceType?
  spec.csharp:
  - uid: Darwin.Net.Objects.ServiceType
    name: ServiceType
  - name: '?'
  spec.vb:
  - uid: Darwin.Net.Objects.ServiceType
    name: ServiceType
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Darwin.Net.Objects.ServiceLocation.AssocIsCancelled*
  commentId: Overload:Darwin.Net.Objects.ServiceLocation.AssocIsCancelled
  name: AssocIsCancelled
  nameWithType: ServiceLocation.AssocIsCancelled
  fullName: Darwin.Net.Objects.ServiceLocation.AssocIsCancelled
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: bool?
  nameWithType: bool?
  fullName: bool?
  nameWithType.vb: Boolean?
  fullName.vb: Boolean?
  name.vb: Boolean?
  spec.csharp:
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: '?'
