### YamlMime:ManagedReference
items:
- uid: Darwin.Net.Objects.DepartureItem
  commentId: T:Darwin.Net.Objects.DepartureItem
  id: DepartureItem
  parent: Darwin.Net.Objects
  children:
  - Darwin.Net.Objects.DepartureItem.Services
  - Darwin.Net.Objects.DepartureItem.Station
  langs:
  - csharp
  - vb
  name: DepartureItem
  nameWithType: DepartureItem
  fullName: Darwin.Net.Objects.DepartureItem
  type: Class
  source:
    remote:
      path: Darwin.Net/Objects/DepartureItem.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: DepartureItem
    path: ../Darwin.Net/Objects/DepartureItem.cs
    startLine: 14
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nDefines a departure item for a train\n"
  example: []
  syntax:
    content: public class DepartureItem
    content.vb: Public Class DepartureItem
  inheritance:
  - System.Object
  derivedClasses:
  - Darwin.Net.Objects.DepartureItemWithCallingPoints
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Darwin.Net.Objects.DepartureItem.Station
  commentId: P:Darwin.Net.Objects.DepartureItem.Station
  id: Station
  parent: Darwin.Net.Objects.DepartureItem
  langs:
  - csharp
  - vb
  name: Station
  nameWithType: DepartureItem.Station
  fullName: Darwin.Net.Objects.DepartureItem.Station
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/DepartureItem.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: Station
    path: ../Darwin.Net/Objects/DepartureItem.cs
    startLine: 21
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nThe station that the <xref href=\"Darwin.Net.Objects.DepartureItem\" data-throw-if-not-resolved=\"false\"></xref> represents\n"
  example: []
  syntax:
    content: public Station Station { get; }
    parameters: []
    return:
      type: Darwin.Net.Objects.Station
    content.vb: Public Property Station As Station
  overload: Darwin.Net.Objects.DepartureItem.Station*
- uid: Darwin.Net.Objects.DepartureItem.Services
  commentId: P:Darwin.Net.Objects.DepartureItem.Services
  id: Services
  parent: Darwin.Net.Objects.DepartureItem
  langs:
  - csharp
  - vb
  name: Services
  nameWithType: DepartureItem.Services
  fullName: Darwin.Net.Objects.DepartureItem.Services
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/DepartureItem.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: Services
    path: ../Darwin.Net/Objects/DepartureItem.cs
    startLine: 26
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nA <xref href=\"System.Collections.Generic.IList%601\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"Darwin.Net.Objects.ServiceItem\" data-throw-if-not-resolved=\"false\"></xref> related to the Station.\n"
  example: []
  syntax:
    content: public IList<ServiceItem> Services { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Darwin.Net.Objects.ServiceItem}
    content.vb: Public Property Services As IList(Of ServiceItem)
  overload: Darwin.Net.Objects.DepartureItem.Services*
references:
- uid: Darwin.Net.Objects
  commentId: N:Darwin.Net.Objects
  name: Darwin.Net.Objects
  nameWithType: Darwin.Net.Objects
  fullName: Darwin.Net.Objects
  spec.csharp:
  - uid: Darwin
    name: Darwin
  - name: .
  - uid: Darwin.Net
    name: Net
  - name: .
  - uid: Darwin.Net.Objects
    name: Objects
  spec.vb:
  - uid: Darwin
    name: Darwin
  - name: .
  - uid: Darwin.Net
    name: Net
  - name: .
  - uid: Darwin.Net.Objects
    name: Objects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Darwin.Net.Objects.DepartureItem
  commentId: T:Darwin.Net.Objects.DepartureItem
  parent: Darwin.Net.Objects
  name: DepartureItem
  nameWithType: DepartureItem
  fullName: Darwin.Net.Objects.DepartureItem
- uid: Darwin.Net.Objects.DepartureItem.Station*
  commentId: Overload:Darwin.Net.Objects.DepartureItem.Station
  name: Station
  nameWithType: DepartureItem.Station
  fullName: Darwin.Net.Objects.DepartureItem.Station
- uid: Darwin.Net.Objects.Station
  commentId: T:Darwin.Net.Objects.Station
  parent: Darwin.Net.Objects
  name: Station
  nameWithType: Station
  fullName: Darwin.Net.Objects.Station
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Darwin.Net.Objects.ServiceItem
  commentId: T:Darwin.Net.Objects.ServiceItem
  parent: Darwin.Net.Objects
  name: ServiceItem
  nameWithType: ServiceItem
  fullName: Darwin.Net.Objects.ServiceItem
- uid: Darwin.Net.Objects.DepartureItem.Services*
  commentId: Overload:Darwin.Net.Objects.DepartureItem.Services
  name: Services
  nameWithType: DepartureItem.Services
  fullName: Darwin.Net.Objects.DepartureItem.Services
- uid: System.Collections.Generic.IList{Darwin.Net.Objects.ServiceItem}
  commentId: T:System.Collections.Generic.IList{Darwin.Net.Objects.ServiceItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ServiceItem>
  nameWithType: IList<ServiceItem>
  fullName: System.Collections.Generic.IList<Darwin.Net.Objects.ServiceItem>
  nameWithType.vb: IList(Of ServiceItem)
  fullName.vb: System.Collections.Generic.IList(Of Darwin.Net.Objects.ServiceItem)
  name.vb: IList(Of ServiceItem)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - uid: Darwin.Net.Objects.ServiceItem
    name: ServiceItem
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Darwin.Net.Objects.ServiceItem
    name: ServiceItem
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
