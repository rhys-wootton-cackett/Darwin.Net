### YamlMime:ManagedReference
items:
- uid: Darwin.Net.Objects.DeparturesBoard
  commentId: T:Darwin.Net.Objects.DeparturesBoard
  id: DeparturesBoard
  parent: Darwin.Net.Objects
  children:
  - Darwin.Net.Objects.DeparturesBoard.AreServicesAvailable
  - Darwin.Net.Objects.DeparturesBoard.Departures
  - Darwin.Net.Objects.DeparturesBoard.FilterLocationName
  - Darwin.Net.Objects.DeparturesBoard.FilterStation
  - Darwin.Net.Objects.DeparturesBoard.FilterType
  - Darwin.Net.Objects.DeparturesBoard.GeneratedAt
  - Darwin.Net.Objects.DeparturesBoard.IsPlatformAvailable
  - Darwin.Net.Objects.DeparturesBoard.LocationName
  - Darwin.Net.Objects.DeparturesBoard.NrccMessages
  - Darwin.Net.Objects.DeparturesBoard.Station
  langs:
  - csharp
  - vb
  name: DeparturesBoard
  nameWithType: DeparturesBoard
  fullName: Darwin.Net.Objects.DeparturesBoard
  type: Class
  source:
    remote:
      path: Darwin.Net/Objects/DeparturesBoard.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: DeparturesBoard
    path: ../Darwin.Net/Objects/DeparturesBoard.cs
    startLine: 14
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nDefines a departure board for a station\n"
  example: []
  syntax:
    content: public class DeparturesBoard
    content.vb: Public Class DeparturesBoard
  inheritance:
  - System.Object
  derivedClasses:
  - Darwin.Net.Objects.DeparturesBoardWithDetails
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Darwin.Net.Objects.DeparturesBoard.GeneratedAt
  commentId: P:Darwin.Net.Objects.DeparturesBoard.GeneratedAt
  id: GeneratedAt
  parent: Darwin.Net.Objects.DeparturesBoard
  langs:
  - csharp
  - vb
  name: GeneratedAt
  nameWithType: DeparturesBoard.GeneratedAt
  fullName: Darwin.Net.Objects.DeparturesBoard.GeneratedAt
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/DeparturesBoard.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: GeneratedAt
    path: ../Darwin.Net/Objects/DeparturesBoard.cs
    startLine: 20
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nThe time at which the <xref href=\"Darwin.Net.Objects.DeparturesBoard\" data-throw-if-not-resolved=\"false\"></xref> was generated\n"
  example: []
  syntax:
    content: public DateTime GeneratedAt { get; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: Public Property GeneratedAt As Date
  overload: Darwin.Net.Objects.DeparturesBoard.GeneratedAt*
- uid: Darwin.Net.Objects.DeparturesBoard.LocationName
  commentId: P:Darwin.Net.Objects.DeparturesBoard.LocationName
  id: LocationName
  parent: Darwin.Net.Objects.DeparturesBoard
  langs:
  - csharp
  - vb
  name: LocationName
  nameWithType: DeparturesBoard.LocationName
  fullName: Darwin.Net.Objects.DeparturesBoard.LocationName
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/DeparturesBoard.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: LocationName
    path: ../Darwin.Net/Objects/DeparturesBoard.cs
    startLine: 25
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nThe name of the location that the station board is for.\n"
  example: []
  syntax:
    content: public string LocationName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property LocationName As String
  overload: Darwin.Net.Objects.DeparturesBoard.LocationName*
- uid: Darwin.Net.Objects.DeparturesBoard.Station
  commentId: P:Darwin.Net.Objects.DeparturesBoard.Station
  id: Station
  parent: Darwin.Net.Objects.DeparturesBoard
  langs:
  - csharp
  - vb
  name: Station
  nameWithType: DeparturesBoard.Station
  fullName: Darwin.Net.Objects.DeparturesBoard.Station
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/DeparturesBoard.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: Station
    path: ../Darwin.Net/Objects/DeparturesBoard.cs
    startLine: 30
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nThe station in the departures board.\n"
  example: []
  syntax:
    content: public Station Station { get; }
    parameters: []
    return:
      type: Darwin.Net.Objects.Station
    content.vb: Public Property Station As Station
  overload: Darwin.Net.Objects.DeparturesBoard.Station*
- uid: Darwin.Net.Objects.DeparturesBoard.FilterLocationName
  commentId: P:Darwin.Net.Objects.DeparturesBoard.FilterLocationName
  id: FilterLocationName
  parent: Darwin.Net.Objects.DeparturesBoard
  langs:
  - csharp
  - vb
  name: FilterLocationName
  nameWithType: DeparturesBoard.FilterLocationName
  fullName: Darwin.Net.Objects.DeparturesBoard.FilterLocationName
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/DeparturesBoard.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: FilterLocationName
    path: ../Darwin.Net/Objects/DeparturesBoard.cs
    startLine: 35
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nIf a filter was requested, the location name of the filter location.\n"
  example: []
  syntax:
    content: public string? FilterLocationName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property FilterLocationName As String
  overload: Darwin.Net.Objects.DeparturesBoard.FilterLocationName*
- uid: Darwin.Net.Objects.DeparturesBoard.FilterStation
  commentId: P:Darwin.Net.Objects.DeparturesBoard.FilterStation
  id: FilterStation
  parent: Darwin.Net.Objects.DeparturesBoard
  langs:
  - csharp
  - vb
  name: FilterStation
  nameWithType: DeparturesBoard.FilterStation
  fullName: Darwin.Net.Objects.DeparturesBoard.FilterStation
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/DeparturesBoard.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: FilterStation
    path: ../Darwin.Net/Objects/DeparturesBoard.cs
    startLine: 40
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nIf a filter was requested, the CRS code of the filter location.\n"
  example: []
  syntax:
    content: public Station? FilterStation { get; }
    parameters: []
    return:
      type: System.Nullable{Darwin.Net.Objects.Station}
    content.vb: Public Property FilterStation As Station?
  overload: Darwin.Net.Objects.DeparturesBoard.FilterStation*
- uid: Darwin.Net.Objects.DeparturesBoard.FilterType
  commentId: P:Darwin.Net.Objects.DeparturesBoard.FilterType
  id: FilterType
  parent: Darwin.Net.Objects.DeparturesBoard
  langs:
  - csharp
  - vb
  name: FilterType
  nameWithType: DeparturesBoard.FilterType
  fullName: Darwin.Net.Objects.DeparturesBoard.FilterType
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/DeparturesBoard.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: FilterType
    path: ../Darwin.Net/Objects/DeparturesBoard.cs
    startLine: 45
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nIf a filter was requested, the type of filter.\n"
  example: []
  syntax:
    content: public FilterType? FilterType { get; }
    parameters: []
    return:
      type: System.Nullable{Darwin.Net.Objects.FilterType}
    content.vb: Public Property FilterType As FilterType?
  overload: Darwin.Net.Objects.DeparturesBoard.FilterType*
- uid: Darwin.Net.Objects.DeparturesBoard.NrccMessages
  commentId: P:Darwin.Net.Objects.DeparturesBoard.NrccMessages
  id: NrccMessages
  parent: Darwin.Net.Objects.DeparturesBoard
  langs:
  - csharp
  - vb
  name: NrccMessages
  nameWithType: DeparturesBoard.NrccMessages
  fullName: Darwin.Net.Objects.DeparturesBoard.NrccMessages
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/DeparturesBoard.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: NrccMessages
    path: ../Darwin.Net/Objects/DeparturesBoard.cs
    startLine: 50
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nAn optional list of textual messages that should be displayed with the station board.\n"
  example: []
  syntax:
    content: public IList<string>? NrccMessages { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
    content.vb: Public Property NrccMessages As IList(Of String)
  overload: Darwin.Net.Objects.DeparturesBoard.NrccMessages*
- uid: Darwin.Net.Objects.DeparturesBoard.IsPlatformAvailable
  commentId: P:Darwin.Net.Objects.DeparturesBoard.IsPlatformAvailable
  id: IsPlatformAvailable
  parent: Darwin.Net.Objects.DeparturesBoard
  langs:
  - csharp
  - vb
  name: IsPlatformAvailable
  nameWithType: DeparturesBoard.IsPlatformAvailable
  fullName: Darwin.Net.Objects.DeparturesBoard.IsPlatformAvailable
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/DeparturesBoard.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: IsPlatformAvailable
    path: ../Darwin.Net/Objects/DeparturesBoard.cs
    startLine: 56
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nAn optional value that indicates if platform information is available. If this value is present with the value &quot;true&quot; then platform information will be returned in the service lists. \nIf this value is not present, or has the value &quot;false&quot;, then the platform &quot;heading&quot; should be suppressed in the user interface for this station board.\n"
  example: []
  syntax:
    content: public bool? IsPlatformAvailable { get; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Public Property IsPlatformAvailable As Boolean?
  overload: Darwin.Net.Objects.DeparturesBoard.IsPlatformAvailable*
- uid: Darwin.Net.Objects.DeparturesBoard.AreServicesAvailable
  commentId: P:Darwin.Net.Objects.DeparturesBoard.AreServicesAvailable
  id: AreServicesAvailable
  parent: Darwin.Net.Objects.DeparturesBoard
  langs:
  - csharp
  - vb
  name: AreServicesAvailable
  nameWithType: DeparturesBoard.AreServicesAvailable
  fullName: Darwin.Net.Objects.DeparturesBoard.AreServicesAvailable
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/DeparturesBoard.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: AreServicesAvailable
    path: ../Darwin.Net/Objects/DeparturesBoard.cs
    startLine: 63
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nAn optional value that indicates if services are currently available for this station board. If this value is present with the value &quot;false&quot; then no services will be returned in the service lists. \nThis value may be set, for example, if access to a station has been closed to the public at short notice, even though the scheduled services are still running. \nIt would be usual in such cases for one of the nrccMessages to describe why the list of services has been suppressed.\n"
  example: []
  syntax:
    content: public bool AreServicesAvailable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property AreServicesAvailable As Boolean
  overload: Darwin.Net.Objects.DeparturesBoard.AreServicesAvailable*
- uid: Darwin.Net.Objects.DeparturesBoard.Departures
  commentId: P:Darwin.Net.Objects.DeparturesBoard.Departures
  id: Departures
  parent: Darwin.Net.Objects.DeparturesBoard
  langs:
  - csharp
  - vb
  name: Departures
  nameWithType: DeparturesBoard.Departures
  fullName: Darwin.Net.Objects.DeparturesBoard.Departures
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/DeparturesBoard.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: Departures
    path: ../Darwin.Net/Objects/DeparturesBoard.cs
    startLine: 69
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nAn <xref href=\"System.Collections.Generic.IList%601\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"Darwin.Net.Objects.DepartureItem\" data-throw-if-not-resolved=\"false\"></xref> for each service that is to appear on the departures board. A <xref href=\"Darwin.Net.Objects.DepartureItem\" data-throw-if-not-resolved=\"false\"></xref> will exist for each CRS code requested \nin the filter but if no information is available the <xref href=\"Darwin.Net.Objects.ServiceItem\" data-throw-if-not-resolved=\"false\"></xref> part will be empty.\n"
  example: []
  syntax:
    content: public IList<DepartureItem> Departures { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Darwin.Net.Objects.DepartureItem}
    content.vb: Public Property Departures As IList(Of DepartureItem)
  overload: Darwin.Net.Objects.DeparturesBoard.Departures*
references:
- uid: Darwin.Net.Objects
  commentId: N:Darwin.Net.Objects
  name: Darwin.Net.Objects
  nameWithType: Darwin.Net.Objects
  fullName: Darwin.Net.Objects
  spec.csharp:
  - uid: Darwin
    name: Darwin
  - name: .
  - uid: Darwin.Net
    name: Net
  - name: .
  - uid: Darwin.Net.Objects
    name: Objects
  spec.vb:
  - uid: Darwin
    name: Darwin
  - name: .
  - uid: Darwin.Net
    name: Net
  - name: .
  - uid: Darwin.Net.Objects
    name: Objects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Darwin.Net.Objects.DeparturesBoard
  commentId: T:Darwin.Net.Objects.DeparturesBoard
  parent: Darwin.Net.Objects
  name: DeparturesBoard
  nameWithType: DeparturesBoard
  fullName: Darwin.Net.Objects.DeparturesBoard
- uid: Darwin.Net.Objects.DeparturesBoard.GeneratedAt*
  commentId: Overload:Darwin.Net.Objects.DeparturesBoard.GeneratedAt
  name: GeneratedAt
  nameWithType: DeparturesBoard.GeneratedAt
  fullName: Darwin.Net.Objects.DeparturesBoard.GeneratedAt
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
  nameWithType.vb: Date
  fullName.vb: Date
  name.vb: Date
- uid: Darwin.Net.Objects.DeparturesBoard.LocationName*
  commentId: Overload:Darwin.Net.Objects.DeparturesBoard.LocationName
  name: LocationName
  nameWithType: DeparturesBoard.LocationName
  fullName: Darwin.Net.Objects.DeparturesBoard.LocationName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Darwin.Net.Objects.DeparturesBoard.Station*
  commentId: Overload:Darwin.Net.Objects.DeparturesBoard.Station
  name: Station
  nameWithType: DeparturesBoard.Station
  fullName: Darwin.Net.Objects.DeparturesBoard.Station
- uid: Darwin.Net.Objects.Station
  commentId: T:Darwin.Net.Objects.Station
  parent: Darwin.Net.Objects
  name: Station
  nameWithType: Station
  fullName: Darwin.Net.Objects.Station
- uid: Darwin.Net.Objects.DeparturesBoard.FilterLocationName*
  commentId: Overload:Darwin.Net.Objects.DeparturesBoard.FilterLocationName
  name: FilterLocationName
  nameWithType: DeparturesBoard.FilterLocationName
  fullName: Darwin.Net.Objects.DeparturesBoard.FilterLocationName
- uid: Darwin.Net.Objects.DeparturesBoard.FilterStation*
  commentId: Overload:Darwin.Net.Objects.DeparturesBoard.FilterStation
  name: FilterStation
  nameWithType: DeparturesBoard.FilterStation
  fullName: Darwin.Net.Objects.DeparturesBoard.FilterStation
- uid: System.Nullable{Darwin.Net.Objects.Station}
  commentId: T:System.Nullable{Darwin.Net.Objects.Station}
  parent: System
  definition: System.Nullable`1
  name: Station?
  nameWithType: Station?
  fullName: Darwin.Net.Objects.Station?
  spec.csharp:
  - uid: Darwin.Net.Objects.Station
    name: Station
  - name: '?'
  spec.vb:
  - uid: Darwin.Net.Objects.Station
    name: Station
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Darwin.Net.Objects.DeparturesBoard.FilterType*
  commentId: Overload:Darwin.Net.Objects.DeparturesBoard.FilterType
  name: FilterType
  nameWithType: DeparturesBoard.FilterType
  fullName: Darwin.Net.Objects.DeparturesBoard.FilterType
- uid: System.Nullable{Darwin.Net.Objects.FilterType}
  commentId: T:System.Nullable{Darwin.Net.Objects.FilterType}
  parent: System
  definition: System.Nullable`1
  name: FilterType?
  nameWithType: FilterType?
  fullName: Darwin.Net.Objects.FilterType?
  spec.csharp:
  - uid: Darwin.Net.Objects.FilterType
    name: FilterType
  - name: '?'
  spec.vb:
  - uid: Darwin.Net.Objects.FilterType
    name: FilterType
  - name: '?'
- uid: Darwin.Net.Objects.DeparturesBoard.NrccMessages*
  commentId: Overload:Darwin.Net.Objects.DeparturesBoard.NrccMessages
  name: NrccMessages
  nameWithType: DeparturesBoard.NrccMessages
  fullName: Darwin.Net.Objects.DeparturesBoard.NrccMessages
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<string>
  nameWithType: IList<string>
  fullName: System.Collections.Generic.IList<string>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: Darwin.Net.Objects.DeparturesBoard.IsPlatformAvailable*
  commentId: Overload:Darwin.Net.Objects.DeparturesBoard.IsPlatformAvailable
  name: IsPlatformAvailable
  nameWithType: DeparturesBoard.IsPlatformAvailable
  fullName: Darwin.Net.Objects.DeparturesBoard.IsPlatformAvailable
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: bool?
  nameWithType: bool?
  fullName: bool?
  nameWithType.vb: Boolean?
  fullName.vb: Boolean?
  name.vb: Boolean?
  spec.csharp:
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: '?'
- uid: Darwin.Net.Objects.DeparturesBoard.AreServicesAvailable*
  commentId: Overload:Darwin.Net.Objects.DeparturesBoard.AreServicesAvailable
  name: AreServicesAvailable
  nameWithType: DeparturesBoard.AreServicesAvailable
  fullName: Darwin.Net.Objects.DeparturesBoard.AreServicesAvailable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Darwin.Net.Objects.DepartureItem
  commentId: T:Darwin.Net.Objects.DepartureItem
  parent: Darwin.Net.Objects
  name: DepartureItem
  nameWithType: DepartureItem
  fullName: Darwin.Net.Objects.DepartureItem
- uid: Darwin.Net.Objects.ServiceItem
  commentId: T:Darwin.Net.Objects.ServiceItem
  parent: Darwin.Net.Objects
  name: ServiceItem
  nameWithType: ServiceItem
  fullName: Darwin.Net.Objects.ServiceItem
- uid: Darwin.Net.Objects.DeparturesBoard.Departures*
  commentId: Overload:Darwin.Net.Objects.DeparturesBoard.Departures
  name: Departures
  nameWithType: DeparturesBoard.Departures
  fullName: Darwin.Net.Objects.DeparturesBoard.Departures
- uid: System.Collections.Generic.IList{Darwin.Net.Objects.DepartureItem}
  commentId: T:System.Collections.Generic.IList{Darwin.Net.Objects.DepartureItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<DepartureItem>
  nameWithType: IList<DepartureItem>
  fullName: System.Collections.Generic.IList<Darwin.Net.Objects.DepartureItem>
  nameWithType.vb: IList(Of DepartureItem)
  fullName.vb: System.Collections.Generic.IList(Of Darwin.Net.Objects.DepartureItem)
  name.vb: IList(Of DepartureItem)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - uid: Darwin.Net.Objects.DepartureItem
    name: DepartureItem
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Darwin.Net.Objects.DepartureItem
    name: DepartureItem
  - name: )
