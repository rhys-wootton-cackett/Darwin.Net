### YamlMime:ManagedReference
items:
- uid: Darwin.Net.Objects.CallingPoint
  commentId: T:Darwin.Net.Objects.CallingPoint
  id: CallingPoint
  parent: Darwin.Net.Objects
  children:
  - Darwin.Net.Objects.CallingPoint.ActualTime
  - Darwin.Net.Objects.CallingPoint.AdhocAlerts
  - Darwin.Net.Objects.CallingPoint.DoesTrainDetachAtFront
  - Darwin.Net.Objects.CallingPoint.EstimatedTime
  - Darwin.Net.Objects.CallingPoint.IsCancelled
  - Darwin.Net.Objects.CallingPoint.LocationName
  - Darwin.Net.Objects.CallingPoint.ScheduleTime
  - Darwin.Net.Objects.CallingPoint.Station
  - Darwin.Net.Objects.CallingPoint.TrainLength
  langs:
  - csharp
  - vb
  name: CallingPoint
  nameWithType: CallingPoint
  fullName: Darwin.Net.Objects.CallingPoint
  type: Class
  source:
    remote:
      path: Darwin.Net/Objects/CallingPoint.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: CallingPoint
    path: ../Darwin.Net/Objects/CallingPoint.cs
    startLine: 14
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nDefines a calling point of a station in a journey\n"
  example: []
  syntax:
    content: public class CallingPoint
    content.vb: Public Class CallingPoint
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Darwin.Net.Objects.CallingPoint.LocationName
  commentId: P:Darwin.Net.Objects.CallingPoint.LocationName
  id: LocationName
  parent: Darwin.Net.Objects.CallingPoint
  langs:
  - csharp
  - vb
  name: LocationName
  nameWithType: CallingPoint.LocationName
  fullName: Darwin.Net.Objects.CallingPoint.LocationName
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/CallingPoint.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: LocationName
    path: ../Darwin.Net/Objects/CallingPoint.cs
    startLine: 20
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nThe display name of this location.\n"
  example: []
  syntax:
    content: public string LocationName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property LocationName As String
  overload: Darwin.Net.Objects.CallingPoint.LocationName*
- uid: Darwin.Net.Objects.CallingPoint.Station
  commentId: P:Darwin.Net.Objects.CallingPoint.Station
  id: Station
  parent: Darwin.Net.Objects.CallingPoint
  langs:
  - csharp
  - vb
  name: Station
  nameWithType: CallingPoint.Station
  fullName: Darwin.Net.Objects.CallingPoint.Station
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/CallingPoint.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: Station
    path: ../Darwin.Net/Objects/CallingPoint.cs
    startLine: 25
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nThe station the train is scheduled at\n"
  example: []
  syntax:
    content: public Station Station { get; }
    parameters: []
    return:
      type: Darwin.Net.Objects.Station
    content.vb: Public Property Station As Station
  overload: Darwin.Net.Objects.CallingPoint.Station*
- uid: Darwin.Net.Objects.CallingPoint.ScheduleTime
  commentId: P:Darwin.Net.Objects.CallingPoint.ScheduleTime
  id: ScheduleTime
  parent: Darwin.Net.Objects.CallingPoint
  langs:
  - csharp
  - vb
  name: ScheduleTime
  nameWithType: CallingPoint.ScheduleTime
  fullName: Darwin.Net.Objects.CallingPoint.ScheduleTime
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/CallingPoint.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: ScheduleTime
    path: ../Darwin.Net/Objects/CallingPoint.cs
    startLine: 32
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nThe scheduled time of the service at this location. The time will be\neither an arrival or departure time, depending on whether it is in the\nsubsequent or previous calling point list.\n"
  example: []
  syntax:
    content: public (string? Text, DateTime? Time)? ScheduleTime { get; }
    parameters: []
    return:
      type: System.Nullable{System.ValueTuple{System.String,System.Nullable{System.DateTime}}}
    content.vb: Public Property ScheduleTime As (Text As String, Time As Date?)?
  overload: Darwin.Net.Objects.CallingPoint.ScheduleTime*
- uid: Darwin.Net.Objects.CallingPoint.EstimatedTime
  commentId: P:Darwin.Net.Objects.CallingPoint.EstimatedTime
  id: EstimatedTime
  parent: Darwin.Net.Objects.CallingPoint
  langs:
  - csharp
  - vb
  name: EstimatedTime
  nameWithType: CallingPoint.EstimatedTime
  fullName: Darwin.Net.Objects.CallingPoint.EstimatedTime
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/CallingPoint.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: EstimatedTime
    path: ../Darwin.Net/Objects/CallingPoint.cs
    startLine: 40
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nThe estimated time of the service at this location. The time will be\neither an arrival or departure time, depending on whether it is in the\nsubsequent or previous calling point list. Will only be present if\nActualTime is not present.\n"
  example: []
  syntax:
    content: public (string? Text, DateTime? Time)? EstimatedTime { get; }
    parameters: []
    return:
      type: System.Nullable{System.ValueTuple{System.String,System.Nullable{System.DateTime}}}
    content.vb: Public Property EstimatedTime As (Text As String, Time As Date?)?
  overload: Darwin.Net.Objects.CallingPoint.EstimatedTime*
- uid: Darwin.Net.Objects.CallingPoint.ActualTime
  commentId: P:Darwin.Net.Objects.CallingPoint.ActualTime
  id: ActualTime
  parent: Darwin.Net.Objects.CallingPoint
  langs:
  - csharp
  - vb
  name: ActualTime
  nameWithType: CallingPoint.ActualTime
  fullName: Darwin.Net.Objects.CallingPoint.ActualTime
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/CallingPoint.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: ActualTime
    path: ../Darwin.Net/Objects/CallingPoint.cs
    startLine: 48
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nThe estimated time of the service at this location. The time will be\neither an arrival or departure time, depending on whether it is in the\nsubsequent or previous calling point list. Will only be present if\nEstimatedTime is not present.\n"
  example: []
  syntax:
    content: public (string? Text, DateTime? Time)? ActualTime { get; }
    parameters: []
    return:
      type: System.Nullable{System.ValueTuple{System.String,System.Nullable{System.DateTime}}}
    content.vb: Public Property ActualTime As (Text As String, Time As Date?)?
  overload: Darwin.Net.Objects.CallingPoint.ActualTime*
- uid: Darwin.Net.Objects.CallingPoint.IsCancelled
  commentId: P:Darwin.Net.Objects.CallingPoint.IsCancelled
  id: IsCancelled
  parent: Darwin.Net.Objects.CallingPoint
  langs:
  - csharp
  - vb
  name: IsCancelled
  nameWithType: CallingPoint.IsCancelled
  fullName: Darwin.Net.Objects.CallingPoint.IsCancelled
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/CallingPoint.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: IsCancelled
    path: ../Darwin.Net/Objects/CallingPoint.cs
    startLine: 53
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nA flag to indicate that this service is cancelled at this location.\n"
  example: []
  syntax:
    content: public bool? IsCancelled { get; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Public Property IsCancelled As Boolean?
  overload: Darwin.Net.Objects.CallingPoint.IsCancelled*
- uid: Darwin.Net.Objects.CallingPoint.TrainLength
  commentId: P:Darwin.Net.Objects.CallingPoint.TrainLength
  id: TrainLength
  parent: Darwin.Net.Objects.CallingPoint
  langs:
  - csharp
  - vb
  name: TrainLength
  nameWithType: CallingPoint.TrainLength
  fullName: Darwin.Net.Objects.CallingPoint.TrainLength
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/CallingPoint.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: TrainLength
    path: ../Darwin.Net/Objects/CallingPoint.cs
    startLine: 59
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nThe train length (number of units) at this location. If not supplied, or\nzero, the length is unknown.\n"
  example: []
  syntax:
    content: public int? TrainLength { get; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Property TrainLength As Integer?
  overload: Darwin.Net.Objects.CallingPoint.TrainLength*
- uid: Darwin.Net.Objects.CallingPoint.DoesTrainDetachAtFront
  commentId: P:Darwin.Net.Objects.CallingPoint.DoesTrainDetachAtFront
  id: DoesTrainDetachAtFront
  parent: Darwin.Net.Objects.CallingPoint
  langs:
  - csharp
  - vb
  name: DoesTrainDetachAtFront
  nameWithType: CallingPoint.DoesTrainDetachAtFront
  fullName: Darwin.Net.Objects.CallingPoint.DoesTrainDetachAtFront
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/CallingPoint.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: DoesTrainDetachAtFront
    path: ../Darwin.Net/Objects/CallingPoint.cs
    startLine: 64
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nTrue if the service detaches units from the front at this location.\n"
  example: []
  syntax:
    content: public bool? DoesTrainDetachAtFront { get; }
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
    content.vb: Public Property DoesTrainDetachAtFront As Boolean?
  overload: Darwin.Net.Objects.CallingPoint.DoesTrainDetachAtFront*
- uid: Darwin.Net.Objects.CallingPoint.AdhocAlerts
  commentId: P:Darwin.Net.Objects.CallingPoint.AdhocAlerts
  id: AdhocAlerts
  parent: Darwin.Net.Objects.CallingPoint
  langs:
  - csharp
  - vb
  name: AdhocAlerts
  nameWithType: CallingPoint.AdhocAlerts
  fullName: Darwin.Net.Objects.CallingPoint.AdhocAlerts
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/CallingPoint.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: AdhocAlerts
    path: ../Darwin.Net/Objects/CallingPoint.cs
    startLine: 70
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nA list of Adhoc Alerts (strings) for this <xref href=\"Darwin.Net.Objects.CallingPoint\" data-throw-if-not-resolved=\"false\"></xref>. If\nthere are no alerts, it will be null.\n"
  example: []
  syntax:
    content: public IList<string>? AdhocAlerts { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
    content.vb: Public Property AdhocAlerts As IList(Of String)
  overload: Darwin.Net.Objects.CallingPoint.AdhocAlerts*
references:
- uid: Darwin.Net.Objects
  commentId: N:Darwin.Net.Objects
  name: Darwin.Net.Objects
  nameWithType: Darwin.Net.Objects
  fullName: Darwin.Net.Objects
  spec.csharp:
  - uid: Darwin
    name: Darwin
  - name: .
  - uid: Darwin.Net
    name: Net
  - name: .
  - uid: Darwin.Net.Objects
    name: Objects
  spec.vb:
  - uid: Darwin
    name: Darwin
  - name: .
  - uid: Darwin.Net
    name: Net
  - name: .
  - uid: Darwin.Net.Objects
    name: Objects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Darwin.Net.Objects.CallingPoint.LocationName*
  commentId: Overload:Darwin.Net.Objects.CallingPoint.LocationName
  name: LocationName
  nameWithType: CallingPoint.LocationName
  fullName: Darwin.Net.Objects.CallingPoint.LocationName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Darwin.Net.Objects.CallingPoint.Station*
  commentId: Overload:Darwin.Net.Objects.CallingPoint.Station
  name: Station
  nameWithType: CallingPoint.Station
  fullName: Darwin.Net.Objects.CallingPoint.Station
- uid: Darwin.Net.Objects.Station
  commentId: T:Darwin.Net.Objects.Station
  parent: Darwin.Net.Objects
  name: Station
  nameWithType: Station
  fullName: Darwin.Net.Objects.Station
- uid: Darwin.Net.Objects.CallingPoint.ScheduleTime*
  commentId: Overload:Darwin.Net.Objects.CallingPoint.ScheduleTime
  name: ScheduleTime
  nameWithType: CallingPoint.ScheduleTime
  fullName: Darwin.Net.Objects.CallingPoint.ScheduleTime
- uid: System.Nullable{System.ValueTuple{System.String,System.Nullable{System.DateTime}}}
  commentId: T:System.Nullable{System.ValueTuple{System.String,System.Nullable{System.DateTime}}}
  parent: System
  definition: System.Nullable`1
  name: (string Text, DateTime? Time)?
  nameWithType: (string Text, DateTime? Time)?
  fullName: (string Text, System.DateTime? Time)?
  nameWithType.vb: (Text As String, Time As Date?)?
  fullName.vb: (Text As String, Time As Date?)?
  name.vb: (Text As String, Time As Date?)?
  spec.csharp:
  - name: (
  - uid: System.String
    name: string
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{System.String,System.Nullable{System.DateTime}}.Text
    name: Text
  - name: ','
  - name: " "
  - uid: System.DateTime
    name: DateTime
    isExternal: true
  - name: '?'
  - name: " "
  - uid: System.ValueTuple{System.String,System.Nullable{System.DateTime}}.Time
    name: Time
  - name: )
  - name: '?'
  spec.vb:
  - name: (
  - uid: System.ValueTuple{System.String,System.Nullable{System.DateTime}}.Text
    name: Text
  - name: " "
  - name: As
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.String,System.Nullable{System.DateTime}}.Time
    name: Time
  - name: " "
  - name: As
  - name: " "
  - uid: System.DateTime
    name: Date
    isExternal: true
  - name: '?'
  - name: )
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Darwin.Net.Objects.CallingPoint.EstimatedTime*
  commentId: Overload:Darwin.Net.Objects.CallingPoint.EstimatedTime
  name: EstimatedTime
  nameWithType: CallingPoint.EstimatedTime
  fullName: Darwin.Net.Objects.CallingPoint.EstimatedTime
- uid: Darwin.Net.Objects.CallingPoint.ActualTime*
  commentId: Overload:Darwin.Net.Objects.CallingPoint.ActualTime
  name: ActualTime
  nameWithType: CallingPoint.ActualTime
  fullName: Darwin.Net.Objects.CallingPoint.ActualTime
- uid: Darwin.Net.Objects.CallingPoint.IsCancelled*
  commentId: Overload:Darwin.Net.Objects.CallingPoint.IsCancelled
  name: IsCancelled
  nameWithType: CallingPoint.IsCancelled
  fullName: Darwin.Net.Objects.CallingPoint.IsCancelled
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: bool?
  nameWithType: bool?
  fullName: bool?
  nameWithType.vb: Boolean?
  fullName.vb: Boolean?
  name.vb: Boolean?
  spec.csharp:
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: '?'
- uid: Darwin.Net.Objects.CallingPoint.TrainLength*
  commentId: Overload:Darwin.Net.Objects.CallingPoint.TrainLength
  name: TrainLength
  nameWithType: CallingPoint.TrainLength
  fullName: Darwin.Net.Objects.CallingPoint.TrainLength
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: int?
  nameWithType: int?
  fullName: int?
  nameWithType.vb: Integer?
  fullName.vb: Integer?
  name.vb: Integer?
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: '?'
- uid: Darwin.Net.Objects.CallingPoint.DoesTrainDetachAtFront*
  commentId: Overload:Darwin.Net.Objects.CallingPoint.DoesTrainDetachAtFront
  name: DoesTrainDetachAtFront
  nameWithType: CallingPoint.DoesTrainDetachAtFront
  fullName: Darwin.Net.Objects.CallingPoint.DoesTrainDetachAtFront
- uid: Darwin.Net.Objects.CallingPoint
  commentId: T:Darwin.Net.Objects.CallingPoint
  name: CallingPoint
  nameWithType: CallingPoint
  fullName: Darwin.Net.Objects.CallingPoint
- uid: Darwin.Net.Objects.CallingPoint.AdhocAlerts*
  commentId: Overload:Darwin.Net.Objects.CallingPoint.AdhocAlerts
  name: AdhocAlerts
  nameWithType: CallingPoint.AdhocAlerts
  fullName: Darwin.Net.Objects.CallingPoint.AdhocAlerts
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<string>
  nameWithType: IList<string>
  fullName: System.Collections.Generic.IList<string>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
