### YamlMime:ManagedReference
items:
- uid: Darwin.Net.Objects.DeparturesBoardWithDetails
  commentId: T:Darwin.Net.Objects.DeparturesBoardWithDetails
  id: DeparturesBoardWithDetails
  parent: Darwin.Net.Objects
  children:
  - Darwin.Net.Objects.DeparturesBoardWithDetails.Departures
  langs:
  - csharp
  - vb
  name: DeparturesBoardWithDetails
  nameWithType: DeparturesBoardWithDetails
  fullName: Darwin.Net.Objects.DeparturesBoardWithDetails
  type: Class
  source:
    remote:
      path: Darwin.Net/Objects/DeparturesBoardWithDetails.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: DeparturesBoardWithDetails
    path: ../Darwin.Net/Objects/DeparturesBoardWithDetails.cs
    startLine: 13
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nDefines a departure board for station with additional details\n"
  example: []
  syntax:
    content: 'public class DeparturesBoardWithDetails : DeparturesBoard'
    content.vb: Public Class DeparturesBoardWithDetails Inherits DeparturesBoard
  inheritance:
  - System.Object
  - Darwin.Net.Objects.DeparturesBoard
  inheritedMembers:
  - Darwin.Net.Objects.DeparturesBoard.GeneratedAt
  - Darwin.Net.Objects.DeparturesBoard.LocationName
  - Darwin.Net.Objects.DeparturesBoard.Station
  - Darwin.Net.Objects.DeparturesBoard.FilterLocationName
  - Darwin.Net.Objects.DeparturesBoard.FilterStation
  - Darwin.Net.Objects.DeparturesBoard.FilterType
  - Darwin.Net.Objects.DeparturesBoard.NrccMessages
  - Darwin.Net.Objects.DeparturesBoard.IsPlatformAvailable
  - Darwin.Net.Objects.DeparturesBoard.AreServicesAvailable
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Darwin.Net.Objects.DeparturesBoardWithDetails.Departures
  commentId: P:Darwin.Net.Objects.DeparturesBoardWithDetails.Departures
  id: Departures
  parent: Darwin.Net.Objects.DeparturesBoardWithDetails
  langs:
  - csharp
  - vb
  name: Departures
  nameWithType: DeparturesBoardWithDetails.Departures
  fullName: Darwin.Net.Objects.DeparturesBoardWithDetails.Departures
  type: Property
  source:
    remote:
      path: Darwin.Net/Objects/DeparturesBoardWithDetails.cs
      branch: master
      repo: https://github.com/rhys-wootton/Darwin.Net
    id: Departures
    path: ../Darwin.Net/Objects/DeparturesBoardWithDetails.cs
    startLine: 20
  assemblies:
  - Darwin.Net
  namespace: Darwin.Net.Objects
  summary: "\nAn <xref href=\"System.Collections.Generic.IList%601\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"Darwin.Net.Objects.DepartureItemWithCallingPoints\" data-throw-if-not-resolved=\"false\"></xref> for each service that is to appear on the departures board. A <xref href=\"Darwin.Net.Objects.DepartureItemWithCallingPoints\" data-throw-if-not-resolved=\"false\"></xref> will \nexist for each CRS code requested in the filter but if no information is available the <xref href=\"Darwin.Net.Objects.ServiceItemWithCallingPoints\" data-throw-if-not-resolved=\"false\"></xref> part will be empty.\n"
  example: []
  syntax:
    content: public IList<DepartureItemWithCallingPoints> Departures { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Darwin.Net.Objects.DepartureItemWithCallingPoints}
    content.vb: Public Property Departures As IList(Of DepartureItemWithCallingPoints)
  overload: Darwin.Net.Objects.DeparturesBoardWithDetails.Departures*
references:
- uid: Darwin.Net.Objects
  commentId: N:Darwin.Net.Objects
  name: Darwin.Net.Objects
  nameWithType: Darwin.Net.Objects
  fullName: Darwin.Net.Objects
  spec.csharp:
  - uid: Darwin
    name: Darwin
  - name: .
  - uid: Darwin.Net
    name: Net
  - name: .
  - uid: Darwin.Net.Objects
    name: Objects
  spec.vb:
  - uid: Darwin
    name: Darwin
  - name: .
  - uid: Darwin.Net
    name: Net
  - name: .
  - uid: Darwin.Net.Objects
    name: Objects
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Darwin.Net.Objects.DeparturesBoard
  commentId: T:Darwin.Net.Objects.DeparturesBoard
  parent: Darwin.Net.Objects
  name: DeparturesBoard
  nameWithType: DeparturesBoard
  fullName: Darwin.Net.Objects.DeparturesBoard
- uid: Darwin.Net.Objects.DeparturesBoard.GeneratedAt
  commentId: P:Darwin.Net.Objects.DeparturesBoard.GeneratedAt
  parent: Darwin.Net.Objects.DeparturesBoard
  name: GeneratedAt
  nameWithType: DeparturesBoard.GeneratedAt
  fullName: Darwin.Net.Objects.DeparturesBoard.GeneratedAt
- uid: Darwin.Net.Objects.DeparturesBoard.LocationName
  commentId: P:Darwin.Net.Objects.DeparturesBoard.LocationName
  parent: Darwin.Net.Objects.DeparturesBoard
  name: LocationName
  nameWithType: DeparturesBoard.LocationName
  fullName: Darwin.Net.Objects.DeparturesBoard.LocationName
- uid: Darwin.Net.Objects.DeparturesBoard.Station
  commentId: P:Darwin.Net.Objects.DeparturesBoard.Station
  parent: Darwin.Net.Objects.DeparturesBoard
  name: Station
  nameWithType: DeparturesBoard.Station
  fullName: Darwin.Net.Objects.DeparturesBoard.Station
- uid: Darwin.Net.Objects.DeparturesBoard.FilterLocationName
  commentId: P:Darwin.Net.Objects.DeparturesBoard.FilterLocationName
  parent: Darwin.Net.Objects.DeparturesBoard
  name: FilterLocationName
  nameWithType: DeparturesBoard.FilterLocationName
  fullName: Darwin.Net.Objects.DeparturesBoard.FilterLocationName
- uid: Darwin.Net.Objects.DeparturesBoard.FilterStation
  commentId: P:Darwin.Net.Objects.DeparturesBoard.FilterStation
  parent: Darwin.Net.Objects.DeparturesBoard
  name: FilterStation
  nameWithType: DeparturesBoard.FilterStation
  fullName: Darwin.Net.Objects.DeparturesBoard.FilterStation
- uid: Darwin.Net.Objects.DeparturesBoard.FilterType
  commentId: P:Darwin.Net.Objects.DeparturesBoard.FilterType
  parent: Darwin.Net.Objects.DeparturesBoard
  name: FilterType
  nameWithType: DeparturesBoard.FilterType
  fullName: Darwin.Net.Objects.DeparturesBoard.FilterType
- uid: Darwin.Net.Objects.DeparturesBoard.NrccMessages
  commentId: P:Darwin.Net.Objects.DeparturesBoard.NrccMessages
  parent: Darwin.Net.Objects.DeparturesBoard
  name: NrccMessages
  nameWithType: DeparturesBoard.NrccMessages
  fullName: Darwin.Net.Objects.DeparturesBoard.NrccMessages
- uid: Darwin.Net.Objects.DeparturesBoard.IsPlatformAvailable
  commentId: P:Darwin.Net.Objects.DeparturesBoard.IsPlatformAvailable
  parent: Darwin.Net.Objects.DeparturesBoard
  name: IsPlatformAvailable
  nameWithType: DeparturesBoard.IsPlatformAvailable
  fullName: Darwin.Net.Objects.DeparturesBoard.IsPlatformAvailable
- uid: Darwin.Net.Objects.DeparturesBoard.AreServicesAvailable
  commentId: P:Darwin.Net.Objects.DeparturesBoard.AreServicesAvailable
  parent: Darwin.Net.Objects.DeparturesBoard
  name: AreServicesAvailable
  nameWithType: DeparturesBoard.AreServicesAvailable
  fullName: Darwin.Net.Objects.DeparturesBoard.AreServicesAvailable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Darwin.Net.Objects.DepartureItemWithCallingPoints
  commentId: T:Darwin.Net.Objects.DepartureItemWithCallingPoints
  name: DepartureItemWithCallingPoints
  nameWithType: DepartureItemWithCallingPoints
  fullName: Darwin.Net.Objects.DepartureItemWithCallingPoints
- uid: Darwin.Net.Objects.ServiceItemWithCallingPoints
  commentId: T:Darwin.Net.Objects.ServiceItemWithCallingPoints
  name: ServiceItemWithCallingPoints
  nameWithType: ServiceItemWithCallingPoints
  fullName: Darwin.Net.Objects.ServiceItemWithCallingPoints
- uid: Darwin.Net.Objects.DeparturesBoardWithDetails.Departures*
  commentId: Overload:Darwin.Net.Objects.DeparturesBoardWithDetails.Departures
  name: Departures
  nameWithType: DeparturesBoardWithDetails.Departures
  fullName: Darwin.Net.Objects.DeparturesBoardWithDetails.Departures
- uid: System.Collections.Generic.IList{Darwin.Net.Objects.DepartureItemWithCallingPoints}
  commentId: T:System.Collections.Generic.IList{Darwin.Net.Objects.DepartureItemWithCallingPoints}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<DepartureItemWithCallingPoints>
  nameWithType: IList<DepartureItemWithCallingPoints>
  fullName: System.Collections.Generic.IList<Darwin.Net.Objects.DepartureItemWithCallingPoints>
  nameWithType.vb: IList(Of DepartureItemWithCallingPoints)
  fullName.vb: System.Collections.Generic.IList(Of Darwin.Net.Objects.DepartureItemWithCallingPoints)
  name.vb: IList(Of DepartureItemWithCallingPoints)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - uid: Darwin.Net.Objects.DepartureItemWithCallingPoints
    name: DepartureItemWithCallingPoints
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Darwin.Net.Objects.DepartureItemWithCallingPoints
    name: DepartureItemWithCallingPoints
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
